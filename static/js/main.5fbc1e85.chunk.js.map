{"version":3,"sources":["components/Button.js","App.js","reportWebVitals.js","index.js","components/Calculator.js"],"names":["Button","props","className","onClick","value","App","Calculator","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","expr","String","state","input","search","setState","percentage","i","length","flag","test","slice","split","reverse","join","eval","lastOperation","percentageAnswer","finalExpr","Math","abs","ex","name","number","answer","sqrt","isNaN","memory","lastChar","Array","from","this","React"],"mappings":"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","file":"static/js/main.5fbc1e85.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button className={props.className} onClick={props.onClick}> {props.value} </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\n\nclass App extends Component {\n  render() {\n    return <Calculator />;\n  }\n}\n\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\n\r\nclass Calculator extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: '0',\r\n        };\r\n        this.memory = 0;\r\n    }\r\n\r\n\r\n    onClick = (value) => {\r\n\r\n        let expr = String(this.state.input);\r\n        if (expr.search(/[error|NaN|Infinity]/g) !== -1) {\r\n            this.state.input = \"0\";\r\n        }\r\n\r\n        switch (value) {\r\n            case 'C': {\r\n                this.setState({ input: '0' });\r\n                break;\r\n            }\r\n            case '%': {\r\n                let expr = String(this.state.input);\r\n                let percentage = \"\";\r\n\r\n                for (let i = expr.length - 1; i >= 0; i--) {\r\n                    let flag = /[-+/*\\s]/.test(expr[i])\r\n                    if (flag) {\r\n                        break;\r\n                    } else {\r\n                        percentage += expr[i];\r\n                        expr = expr.slice(0, -1);\r\n                    }\r\n                }\r\n                percentage = percentage.split('').reverse().join('');\r\n                try {\r\n\r\n                    if (expr === '') {\r\n                        this.state.input = this.state.input + `/100`;\r\n                        this.setState({ input: eval(this.state.input) });\r\n                    } else {\r\n                        let lastOperation = expr.slice(-1);\r\n                        expr = expr.slice(0, -1);\r\n                        let percentageAnswer;\r\n                        switch (lastOperation) {\r\n                            case '/':\r\n                            case '*': {\r\n                                percentageAnswer = percentage / 100;\r\n                                break;\r\n                            }\r\n                            case '+':\r\n                            case '-': {\r\n                                let finalExpr = eval(expr);\r\n                                percentageAnswer = Math.abs(finalExpr*percentage/100);\r\n                                if(finalExpr<0) {\r\n                                    if (lastOperation === '+') {\r\n                                        lastOperation = '-';\r\n                                    } else if (lastOperation === '-') {\r\n                                        lastOperation = '+';\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n                            default: {\r\n                                break;\r\n                            }\r\n                        }\r\n                        this.setState({ input: expr + lastOperation + percentageAnswer });\r\n                    }\r\n                } catch (ex) {\r\n                    this.setState({ input: ex.name });\r\n                }\r\n                break;\r\n            }\r\n            case '.': {\r\n                let expr = this.state.input;\r\n                let number = '';\r\n                for (let i = expr.length - 1; i >= 0; i--) {\r\n                    if (/[-+/*\\s]/.test(expr[i])) {\r\n                        break;\r\n                    } else {\r\n                        number += expr[i];\r\n                        expr = expr.slice(0, -1);\r\n                    }\r\n                }\r\n                if (/[.]/.test(number) && /[.]/.test(value)) {\r\n                    break;\r\n                } else {\r\n                    if (/[-+/*]/.test(this.state.input.slice(-1))) {\r\n                        this.setState({ input: this.state.input + '0' + value });\r\n                    } else {\r\n                        this.setState({ input: this.state.input + value });\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case '+/-': {\r\n                if (/[-+/*]/.test(this.state.input.slice(-1))) {\r\n                    break;\r\n                } else {\r\n                    this.setState({ input: this.state.input + `*(-1)` })\r\n                }\r\n                break;\r\n            }\r\n            case '0': {\r\n                if (this.state.input === '0') {\r\n                    break;\r\n                }\r\n                if ((this.state.input.slice(-1) === '0' && /[-+/*\\s]/.test(this.state.input[this.state.input.length - 2])) || this.state.input.slice(-1) === ')') {\r\n                    break;\r\n                } else {\r\n                    this.setState({ input: this.state.input + value });\r\n                }\r\n                break;\r\n            }\r\n            case '=': {\r\n                try {\r\n                    let answer = String(eval(this.state.input));\r\n                    this.setState({ input: answer });\r\n                } catch (ex) {\r\n                    this.setState({ input: ex.name });\r\n                }\r\n                break;\r\n            }\r\n            case 'sqrt': {\r\n\r\n                let expr = this.state.input;\r\n                let sqrt = Math.sqrt((expr));\r\n                if (isNaN(sqrt)) {\r\n                    this.setState({ input: 'error' });\r\n\r\n                }\r\n                else {\r\n                    this.setState({ input: sqrt })\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            case 'MRC': {\r\n\r\n                this.setState({\r\n                    input: String(this.memory)\r\n                })\r\n\r\n                break;\r\n            }\r\n\r\n            case 'M-': {\r\n\r\n                let expr = this.state.input;\r\n                if (!isNaN(expr)) {\r\n                    this.memory = (1*this.memory - 1*expr);\r\n                }\r\n                else {\r\n                    this.setState({ input: 'error' });\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            case 'M+': {\r\n\r\n                let expr = this.state.input;\r\n                if (!isNaN(expr)) {\r\n                    this.memory = (1*this.memory + 1*expr);\r\n                }\r\n                else {\r\n                    this.setState({ input: 'error' });\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n\r\n\r\n            default: {\r\n                let lastChar = Array.from(this.state.input);\r\n                lastChar = lastChar.slice(-1);\r\n\r\n                if (/[0]/.test(lastChar) && !/[-+/*]/.test(value)) {\r\n                    this.setState({ input: this.state.input.slice(0, -1) + value });\r\n                    break;\r\n                }\r\n                if ((/[-+/*]/.test(lastChar) && /[-+/*]/.test(value))) {\r\n                    this.setState({ input: this.state.input.slice(0, -1) + value });\r\n                } else {\r\n                    if (/[)]/.test(lastChar) && !/[-+/*]/.test(value)) {\r\n                        break;\r\n                    }\r\n                    this.setState({ input: this.state.input + value });\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className='calculator-body'>\r\n                <div className='wrapper'>\r\n                    <div className='result'>\r\n                        <div className=''>\r\n                            <p> {this.state.input } </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='btn_field'>\r\n\r\n                    <aside className='left_block'>\r\n\r\n                        <Button className='button_narrow' value='OFF' onClick={() => this.onClick('C')}/>\r\n                        <Button className='button_narrow' value='+/-' onClick={() => this.onClick('+/-')}/>\r\n                        <Button className='button_narrow' value='sqrt' onClick={() => this.onClick('sqrt')} />\r\n\r\n                        <Button value='MRC' onClick={() => this.onClick('MRC')}/>\r\n                        <Button value='M-' onClick={() => this.onClick('M-')}/>\r\n                        <Button value='M+' onClick={() => this.onClick('M+')}/>\r\n                        <Button value='7' onClick={() => this.onClick('7')}/>\r\n                        <Button value='8' onClick={() => this.onClick('8')}/>\r\n                        <Button value='9' onClick={() => this.onClick('9')}/>\r\n                        <Button value='4' onClick={() => this.onClick('4')}/>\r\n                        <Button value='5' onClick={() => this.onClick('5')}/>\r\n                        <Button value='6' onClick={() => this.onClick('6')}/>\r\n                        <Button value='1' onClick={() => this.onClick('1')}/>\r\n                        <Button value='2' onClick={() => this.onClick('2')}/>\r\n                        <Button value='3' onClick={() => this.onClick('3')}/>\r\n                        <Button value='.' onClick={() => this.onClick('.')}/>\r\n                        <Button value='0' onClick={() => this.onClick('0')}/>\r\n                        <Button value='=' onClick={() => this.onClick('=')}/>\r\n                    </aside>\r\n\r\n                    <aside className='right_block'>\r\n                        <Button className='button_narrow' value=\"%\" onClick={() => this.onClick('%')}/>\r\n                        <Button value='/' onClick={() => this.onClick('/')}/>\r\n                        <Button value='*' onClick={() => this.onClick('*')}/>\r\n                        <Button value='-' onClick={() => this.onClick('-')}/>\r\n                        <Button className=\"button_plus\" value=\"+\" onClick={() => this.onClick('+')}/>\r\n                    </aside>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n"],"sourceRoot":""}